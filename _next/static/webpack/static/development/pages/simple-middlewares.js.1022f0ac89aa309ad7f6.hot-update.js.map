{"version":3,"file":"static/webpack/static/development/pages/simple-middlewares.js.1022f0ac89aa309ad7f6.hot-update.js","sources":["webpack:///./pages/simple-middlewares.tsx"],"sourcesContent":["import * as React from 'react';\nimport Layout from '../layouts/main';\nimport { NextPage } from 'next';\nimport DemoForm from '../components/DemoForm';\n\nimport { FormGroup, Button, Tooltip, Intent, Toaster } from '@blueprintjs/core';\nimport { delay } from 'bluebird';\nimport { isRequired } from '../src/core';\n\n// const { Button, message, Form: AntdForm, Tooltip } = Antd;\n// const { InfoCircleOutlined } = AntdIcons;\n// const Promise = Bluebird;\nimport { BlueprintFormMiddlewareProps } from '../src/share';\nconst MyButtonsMw = (props: BlueprintFormMiddlewareProps) => {\n  const {\n    parent,\n    next,\n    onChange,\n    formProps: { defaultData },\n  } = props;\n\n  const toaster = React.useRef<any>(null);\n  const [submitting, setSubmitting] = React.useState(false);\n\n  // if not on the root node, pass the control to the next middleware\n  if (parent) return next(props);\n\n  const handleSubmit = async function() {\n    setSubmitting(true);\n    await delay(1000);\n    // pactically, should check unmounted here\n    setSubmitting(false);\n    toaster.current && toaster.current.show({ message: 'Success!', intent: Intent.SUCCESS });\n  };\n  const handleClear = () => onChange({});\n  const handleReset = () => onChange(defaultData);\n\n  return (\n    <>\n      {next(props) /* render the body of the form */}\n      <Button intent={Intent.PRIMARY} onClick={handleSubmit} loading={submitting}>\n        Submit\n      </Button>{' '}\n      <Button onClick={handleClear}>Clear</Button> <Button onClick={handleReset}>Reset</Button>\n      <Toaster ref={toaster} />\n    </>\n  );\n};\n\nconst MyFormItemTemplate = (props: BlueprintFormMiddlewareProps) => {\n  const { schema, dataPath, parent, next } = props;\n\n  if (\n    typeof schema === 'boolean' ||\n    schema.type === 'object' ||\n    schema.type === 'array' ||\n    // skip if current node is under an array\n    (parent && typeof parent.schema !== 'boolean' && parent.schema.type === 'array')\n  )\n    return next(props);\n\n  const labelText = schema.title || dataPath[dataPath.length - 1]; // latter one is the current prop name\n  const label = schema.description ? (\n    <Tooltip content={schema.description}>\n      <div>{labelText}</div>\n    </Tooltip>\n  ) : (\n    labelText\n  );\n\n  return (\n    <FormGroup\n      label={schema.title || dataPath[dataPath.length - 1]}\n      helperText={schema.description}\n      labelInfo={isRequired(props) ? '(required)' : ''}\n    >\n      {next(props)}\n    </FormGroup>\n  );\n};\n\nconst code = `const schema = {\n  type: 'object',\n  properties: {\n    username: { type: 'string', description: 'Username description' },\n    firstname: { type: 'string' },\n    lastname: { type: 'string' },\n    email: { type: 'string', description: 'Email description' },\n  },\n};\n\nconst defaultData = {\n  username: 'jhon',\n  firstname: 'Jhon',\n  lastname: 'Smith',\n};\n\nconst middlewares = [\n  MyButtonsMw,\n  FieldsetTemplateMw,\n  MyFormItemTemplate,\n  ...schemaMws,\n  InputMw,\n  NotSupportedMw,\n];\n\nrender(\n  <Form\n    defaultData={defaultData}\n    layout=\"vertical\"\n    schema={schema}\n    middlewares={middlewares}\n  />\n);\n`;\n\nconst IndexPage: NextPage = () => {\n  return (\n    <Layout>\n      <DemoForm code={code} scope={{ MyButtonsMw, MyFormItemTemplate }} />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAkCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}