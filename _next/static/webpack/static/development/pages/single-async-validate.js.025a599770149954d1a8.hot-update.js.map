{"version":3,"file":"static/webpack/static/development/pages/single-async-validate.js.025a599770149954d1a8.hot-update.js","sources":["webpack:///./pages/single-async-validate.tsx"],"sourcesContent":["import * as React from 'react';\nimport Layout from '../layouts/main';\nimport { NextPage } from 'next';\n\nimport DemoForm from '../components/DemoForm';\n\nconst code = `const Promise= Bluebird;\nconst { useAsync } = ReactAsyncHook;\nconst { FormGroup } = BlueprintjsCore;\nconst ajv = new Ajv({\n  errorDataPath: 'property',\n  allErrors: true,\n  multipleOfPrecision: 8,\n  schemaId: 'auto',\n  unknownFormats: 'ignore',\n});\n\nasync function waitForStopTyping(data, focused) {\n  if (!focused) return data;\n  await Promise.delay(500);\n  return data;\n}\n\nasync function asyncValidate(dataToSend, schema) {\n  if (!dataToSend) return null;\n  await Promise.delay(2000);\n  ajv.validate(schema, dataToSend);\n  return ajv.errors;\n}\n\nconst ExampleSignleAsyncValidateMw = (props) => {\n  const { schema, data, parent, dataPath, next, extraProps } = props;\n  const touched = React.useRef(false);\n  const focused = React.useRef(false);\n\n  const { loading: typing, result: dataToSend } = useAsync(\n    waitForStopTyping,\n    [data, focused.current],\n    { executeOnUpdate: true }\n  );\n\n  const { loading: validating, result: errors } = useAsync(\n    asyncValidate,\n    [dataToSend, schema],\n    { executeOnUpdate: true }\n  );\n\n  if (\n    typeof schema === 'boolean' ||\n    schema.type === 'object' ||\n    schema.type === 'array' ||\n    (parent && typeof parent.schema !== 'boolean' && parent.schema.type === 'array')\n  )\n    return next(props);\n\n  const error = errors && errors[0];\n\n  const onFocus = () => (touched.current = focused.current = true);\n  const onBlur = () => (focused.current = false);\n  const status = (typing && 'typing') || (validating && 'validating') || (error && 'error') || (!typing && touched.current && 'success') || '';\n\n  return (\n    <FormGroup\n      label={schema.title || dataPath[dataPath.length - 1]}\n      helperText={schema.description}\n      labelInfo={ status ? \\`($\\{status\\})\\` : null }\n    >\n    {next({\n        ...props,\n        extraProps: {\n          ...extraProps,\n          props: {\n            ...(extraProps || {}).props,\n            onFocus,\n            onBlur,\n          },\n        },\n      })}\n    </FormGroup>\n  );\n};\n\nconst schema = {\n  type: 'object',\n  title: 'Form',\n  properties: {\n    number_1: {\n      type: 'string',\n      description: 'Max length 5',\n      title: 'String 1',\n      maxLength: 5,\n    },\n    number_2: {\n      type: 'string',\n      description: 'Min length 5',\n      title: 'String 2',\n      minLength: 5,\n    },\n  },\n};\n\nconst middlewares = [\n  ...schemaMws,\n  ExampleSignleAsyncValidateMw,\n  InputMw,\n  NotSupportedMw,\n];\n\nrender(\n  <Form\n    schema={schema}\n    middlewares={middlewares}\n  />\n);\n`;\n\nconst IndexPage: NextPage = () => {\n  return (\n    <Layout>\n      <DemoForm code={code} />\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AAEA;AACA;AA6GA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}